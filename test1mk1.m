    clear;
    clc;
%Load sample dataset-----------------------------------------------------
    %this is the formatted example dataset of the NPRTool
    load iris_dataset;
    %pass dataset in matrices data(4 rows, 150 col)
    %and target(3 rows, 150 col [binary matrix]).
    [data,target]= iris_dataset ;
    
%Declare hidden layer sizes. We use 2 hidden layers.---------------------
    hiddenLayer1Size = 10;
    hiddenLayer2Size = 10;
    %hiddenLayer3Size = 10;

%Network Creation.-------------------------------------------------------

    %trainFcn='trainlm'; %Lavenberg-Marquardt function

    
    net = patternnet([hiddenLayer1Size hiddenLayer2Size]);
    
%Setup Division of Data for Training, Validation, Testing.---------------
    net.trainFcn='trainlm';
    net.divideParam.trainRatio = 60/100;% selecting 30 samples of each category
    net.divideParam.valRatio = 20/100;%validating with 10 from every one
    net.divideParam.testRatio = 20/100;%testing with the rest
%Training of our network.------------------------------------------------
    net = train(net,data,target);
%Prompt our network.It should display to hiddenlayers.-------------------
    view(net);
%Test network performance.-----------------------------------------------
    %y = net(data);
    %perf = perform(net,target,y);
    %classes = vec2ind(y);
    %This script part was generated by the tool. The above is the one we
    %wrote.
    y = net(data);
    e = gsubtract(target,y);
    performance = perform(net,target,y)
    tind = vec2ind(target);%vectors to indices, basically the rows that ones(1) are found among zeros(0)
    yind = vec2ind(y);%vectors to indices
    %calc error, number of elements(numel)
    percentErrors = sum(tind ~= yind)/numel(tind);


